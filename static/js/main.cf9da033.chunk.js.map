{"version":3,"sources":["models/operators.ts","components/Wrapper.tsx","components/Screen.tsx","components/ButtonBox.tsx","components/Button.tsx","models/token.ts","models/operands.ts","utils/constants.ts","utils/tokenize.ts","utils/evaluate.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OPERATOR_TYPE","Wrapper","children","className","Screen","value","ButtonBox","Button","onClick","Token","position","this","Tokenizable","token","Operator","type","BinaryOperator","num1","num2","SyntaxError","Plus","PLUS","validate","Minus","MINUS","Multiply","MULTIPLY","Divide","DIVIDE","Error","Numeric","parseFloat","ALLOWED_OPERATORS","isNumberChar","c","tokenize","s","tokens","i","length","j","push","slice","Object","values","includes","parse","isNaN","isNumericToken","isOperatorToken","evaluate","ops","forEach","op1","op2","parsed","num","pop","result","btnValues","App","useState","expression","setExpression","handleOperatorClick","handleNumberClick","n","handleEqualClick","err","console","error","handleResetClick","handleDeleteClick","flat","map","btn","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAGYA,E,8DCIGC,EAJC,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,SACjB,OAAO,qBAAKC,UAAU,UAAf,SAA0BD,KCMpBE,G,MARA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAChB,OACE,qBAAKF,UAAU,SAAf,SACGE,MCEQC,G,MAJG,SAAC,GAAiD,IAA/CJ,EAA8C,EAA9CA,SACnB,OAAO,qBAAKC,UAAU,YAAf,SAA4BD,MCWtBK,G,MARA,SAAC,GAAgD,IAA9CJ,EAA6C,EAA7CA,UAAWE,EAAkC,EAAlCA,MAAOG,EAA2B,EAA3BA,QAClC,OACE,wBAAQL,UAAWA,EAAWK,QAASA,EAAvC,SACGH,M,4BCVMI,EAIX,WAAYJ,EAAeK,GAAmB,yBAH9CL,WAG6C,OAF7CK,cAE6C,EAC3CC,KAAKN,MAAQA,EACbM,KAAKD,SAAWA,GAIPE,EAGX,WAAYC,GAAe,yBAF3BA,WAE0B,EACxBF,KAAKE,MAAQA,I,SLXLb,K,SAAAA,E,UAAAA,E,aAAAA,E,YAAAA,M,KAML,IAAec,EAAtB,kDAGE,WAAYC,EAAqBF,GAAe,IAAD,8BAC7C,cAAMA,IAHRE,UAE+C,EAE7C,EAAKA,KAAOA,EAFiC,EAHjD,UAAuCH,GAYjBI,EAAtB,8JACE,SAASC,EAAgBC,GACvB,GAAY,MAARD,GAAwB,MAARC,EAAc,MAAM,IAAIC,YAAJ,wCACLR,KAAKI,KADA,yBACqBJ,KAAKE,MAAMH,SAAW,IAGnF,OAAO,MANX,GAA6CI,GAUhCM,EAAb,kDACE,WAAYP,GAAe,uCACnBb,EAAcqB,KAAMR,GAF9B,4CAKE,SAASI,EAAeC,GAEtB,OADAP,KAAKW,SAASL,EAAMC,GACbD,EAAKZ,MAAQa,EAAKb,UAP7B,GAA0BW,GAWbO,EAAb,kDACE,WAAYV,GAAe,uCACnBb,EAAcwB,MAAOX,GAF/B,4CAKE,SAASI,EAAeC,GAEtB,OADAP,KAAKW,SAASL,EAAMC,GACbA,EAAKb,MAAQY,EAAKZ,UAP7B,GAA2BW,GAWdS,EAAb,kDACE,WAAYZ,GAAe,uCACnBb,EAAc0B,SAAUb,GAFlC,4CAKE,SAASI,EAAeC,GAEtB,OADAP,KAAKW,SAASL,EAAMC,GACbD,EAAKZ,MAAQa,EAAKb,UAP7B,GAA8BW,GAWjBW,EAAb,kDACE,WAAYd,GAAe,uCACnBb,EAAc4B,OAAQf,GAFhC,4CAKE,SAASI,EAAeC,GAEtB,GADAP,KAAKW,SAASL,EAAMC,GACD,IAAfD,EAAKZ,MAAa,MAAM,IAAIwB,MAAM,yBACtC,OAAOX,EAAKb,MAAQY,EAAKZ,UAR7B,GAA4BW,GM9Dfc,EAIX,WAAYzB,EAAwBQ,GAAgB,yBAHpDA,WAGmD,OAFnDR,WAEmD,EACjDM,KAAKN,MAAQ0B,WAAW,GAAD,OAAI1B,IAC3BM,KAAKE,MAAQA,GCRJmB,EAAoB,CAAC,IAAK,IAAK,IAAK,KCIpCC,EAAe,SAACC,GAAD,OAAyBA,GAAK,KAAOA,GAAK,KAAc,MAANA,GA4B/DC,EAvBE,SAACC,GAIhB,IAHA,IAL6BF,EAKvBG,EAAkB,GACpBC,EAAI,EAEDA,EAAIF,EAAEG,QAAQ,CACnB,GAAIN,EAAaG,EAAEE,IAAK,CAEtB,IADA,IAAIE,EAAIF,EACDL,EAAaG,EAAEI,EAAI,KAAKA,IAE/B,GAAIA,EAAIF,EAAI,EDjBc,GCiBQ,MAAM,IAAIT,MAAM,eAClDQ,EAAOI,KAAK,IAAIhC,EAAM2B,EAAEM,MAAMJ,EAAGE,EAAI,GAAIF,IACzCA,EAAIE,EAAI,EAfiBN,EAkBRE,EAAEE,GAlB6BK,OAAOC,OAAO5C,GAAe6C,SAASX,KAmBtFG,EAAOI,KAAK,IAAIhC,EAAM2B,EAAEE,GAAIA,IAC5BA,GAAK,GAIT,OAAOD,GCbT,IAAMS,EAAQ,SAACjC,GACb,GDX4B,SAACA,GAAD,OAA4BkC,OAAOlC,EAAMR,OCWjE2C,CAAenC,GAAQ,OAAO,IAAIiB,EAAQjB,EAAMR,MAAOQ,GAC3D,GDX6B,SAACA,GAAD,OAA2B8B,OAAOC,OAAO5C,GAAe6C,SAAShC,EAAMR,OCWhG4C,CAAgBpC,GAAQ,CAC1B,GAAoB,MAAhBA,EAAMR,MAAe,OAAO,IAAIe,EAAKP,GACzC,GAAoB,MAAhBA,EAAMR,MAAe,OAAO,IAAIkB,EAAMV,GAC1C,GAAoB,MAAhBA,EAAMR,MAAe,OAAO,IAAIoB,EAASZ,GAC7C,GAAoB,MAAhBA,EAAMR,MAAe,OAAO,IAAIsB,EAAOd,GAG7C,MAAM,IAAIM,YAAJ,4BAAqCN,EAAMR,MAA3C,yBAAiEQ,EAAMH,YAiChEwC,EA9BE,SAACd,GAChB,IAAMC,EAASF,EAASC,GAClBe,EAAkB,GAClBP,EAAoB,GAgB1B,IAdAP,EAAOe,SAAQ,SAAAvC,GACb,IA7BmBwC,EAAaC,EA6B1BC,EAA6BT,EAAMjC,GAGzC,GADI0C,aAAkBzB,GAASc,EAAOH,KAAKc,GACvCA,aAAkBzC,EAAU,CAC9B,KAAOqC,EAAIZ,SAjCMc,EAiCkBE,EAAOxC,KAhClC,OADsBuC,EAiCkBH,EAAIA,EAAIZ,OAAS,GAAGxB,OAhC7C,MAARuC,IAGN,MAARD,GAAuB,MAARA,GACN,MAARC,GAAuB,MAARA,KA4B0D,CAEzE,IAAME,EAAcL,EAAIM,MAAOP,SAASN,EAAOa,MAAOb,EAAOa,OAC7Db,EAAOH,KAAK,IAAIX,EAAQ0B,IAE1BL,EAAIV,KAAKc,OAINJ,EAAIZ,QAAQ,CAEjB,IAAMiB,EAAcL,EAAIM,MAAOP,SAASN,EAAOa,MAAOb,EAAOa,OAC7Db,EAAOH,KAAK,IAAIX,EAAQ0B,IAG1B,IAAME,EAASd,EAAOa,MACtB,IAAKC,EAAQ,MAAM,IAAI7B,MAAM,qBAC7B,OAAO6B,EAAOrD,OC1CVsD,G,MAAY,CAChB,CAAC,IAAK,MAAO,MAAO,KACpB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,OAiDEC,EA9CH,WACV,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KASMC,EAAsB,SAAC5B,GAAD,OAAe2B,EAAcD,EAAa1B,IAChE6B,EAAoB,SAACC,GAAD,OAAeH,EAAcD,EAAaI,IAC9DC,EAAmB,WACvB,IACE,IAAMT,EAASR,EAASY,GACxBC,EAAc,GAAD,OAAIL,IACjB,MAAOU,GACPC,QAAQC,MAAMF,KAGZG,EAAmB,kBAAMR,EAAc,KACvCS,EAAoB,kBAAMT,EAAcD,EAAWpB,MAAM,EAAGoB,EAAWvB,OAAS,KAEtF,OACE,qBAAKpC,UAAU,MAAf,SACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAQE,MAAOyD,IACf,cAAC,EAAD,UAEIH,EAAUc,OAAOC,KAAI,SAACC,EAAKrC,GACzB,OACE,cAAC,EAAD,CAEEnC,UAAmB,MAARwE,EAAc,SAAW,GACpCtE,MAAOsE,EACPnE,QAAS,kBAhCL,SAACmE,IACfA,GAAO,KAAOA,GAAO,KAAe,MAARA,IAAaV,EAAkBU,GAC3D3C,EAAkBa,SAAS8B,IAAMX,EAAoBW,GAC7C,MAARA,GAAaR,IACL,MAARQ,GAAaJ,IACL,QAARI,GAAeH,IA2BUI,CAAYD,KAHtBrC,cCvCRuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cf9da033.chunk.js","sourcesContent":["import { Token, Tokenizable } from \"./token\";\nimport { Numeric } from \"./operands\";\n\nexport enum OPERATOR_TYPE {\n  PLUS = '+',\n  MINUS = '-',\n  MULTIPLY = '*',\n  DIVIDE = '/'\n}\nexport abstract class Operator extends Tokenizable {\n  type: OPERATOR_TYPE;\n\n  constructor(type: OPERATOR_TYPE, token: Token) {\n    super(token);\n    this.type = type;\n  }\n\n  abstract evaluate(...nums: (Numeric | undefined)[]): number;\n  abstract validate(...nums: (Numeric | undefined)[]): boolean;\n}\n\nexport abstract class BinaryOperator extends Operator {\n  validate(num1?: Numeric, num2?: Numeric): boolean {\n    if (num1 == null || num2 == null) throw new SyntaxError(\n      `Missing operand for operator \"${this.type}\" at position ${this.token.position + 1}`\n    );\n\n    return true;\n  }\n}\n\nexport class Plus extends BinaryOperator {\n  constructor(token: Token) {\n    super(OPERATOR_TYPE.PLUS, token);\n  }\n\n  evaluate(num1: Numeric, num2: Numeric): number {\n    this.validate(num1, num2);\n    return num1.value + num2.value;\n  }\n}\n\nexport class Minus extends BinaryOperator {\n  constructor(token: Token) {\n    super(OPERATOR_TYPE.MINUS, token);\n  }\n\n  evaluate(num1: Numeric, num2: Numeric): number {\n    this.validate(num1, num2);\n    return num2.value - num1.value;\n  }\n}\n\nexport class Multiply extends BinaryOperator {\n  constructor(token: Token) {\n    super(OPERATOR_TYPE.MULTIPLY, token);\n  }\n\n  evaluate(num1: Numeric, num2: Numeric): number {\n    this.validate(num1, num2);\n    return num1.value * num2.value;\n  }\n}\n\nexport class Divide extends BinaryOperator {\n  constructor(token: Token) {\n    super(OPERATOR_TYPE.DIVIDE, token);\n  }\n\n  evaluate(num1: Numeric, num2: Numeric): number {\n    this.validate(num1, num2);\n    if (num1.value === 0) throw new Error('Cannot divide by zero');\n    return num2.value / num1.value;\n  }\n}","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = ({ children }: { children: React.ReactNode }) => {\n  return <div className=\"wrapper\">{children}</div>;\n};\n\nexport default Wrapper;\n","import \"./Screen.css\";\n\nconst Screen = ({ value }: { value: string }) => {\n  return (\n    <div className=\"screen\">\n      {value}\n    </div>\n  );\n};\n\nexport default Screen;\n","import React from \"react\";\nimport \"./ButtonBox.css\";\n\nconst ButtonBox = ({ children }: { children: React.ReactNode }) => {\n  return <div className=\"buttonBox\">{children}</div>;\n};\n\nexport default ButtonBox;\n","import \"./Button.css\";\n\ntype ButtonProps = {\n  className: string;\n  value: string;\n  onClick(): void;\n}\nconst Button = ({ className, value, onClick }: ButtonProps) => {\n  return (\n    <button className={className} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Button;\n","export class Token {\n  value: string;\n  position: number;\n\n  constructor(value: string, position: number) {\n    this.value = value;\n    this.position = position;\n  }\n}\n\nexport class Tokenizable {\n  token: Token;\n\n  constructor(token: Token) {\n    this.token = token;\n  }\n}\n","import { Token } from \"./token\";\n\nexport class Numeric {\n  token?: Token;\n  value: number;\n\n  constructor(value: number | string, token?: Token) {\n    this.value = parseFloat(`${value}`);\n    this.token = token;\n  }\n}","export const ALLOWED_OPERATORS = ['+', '-', '*', '/'];\nexport const MAX_TOKEN_LENGTH = 16;\n","import { Token } from \"../models/token\";\nimport { OPERATOR_TYPE } from '../models/operators';\nimport { MAX_TOKEN_LENGTH } from './constants';\n\nexport const isNumberChar = (c: string): boolean => (c >= '0' && c <= '9') || c === '.';\nexport const isOperatorChar = (c: string): boolean => Object.values(OPERATOR_TYPE).includes(c as OPERATOR_TYPE);\nexport const isNumericToken = (token: Token): boolean => !isNaN(+token.value);\nexport const isOperatorToken = (token: Token): boolean => Object.values(OPERATOR_TYPE).includes(token.value as OPERATOR_TYPE)\n\nconst tokenize = (s: string): Token[] => {\n  const tokens: Token[] = [];\n  let i = 0;\n\n  while (i < s.length) {\n    if (isNumberChar(s[i])) {\n      let j = i;\n      while (isNumberChar(s[j + 1])) j++;\n      \n      if (j - i + 1 > MAX_TOKEN_LENGTH) throw new Error('Max reached');\n      tokens.push(new Token(s.slice(i, j + 1), i));\n      i = j + 1;\n    }\n    \n    if (isOperatorChar(s[i])) {\n      tokens.push(new Token(s[i], i));\n      i += 1;\n    }\n  }\n\n  return tokens;\n}\n\nexport default tokenize;","import { Token } from '../models/token';\nimport { Plus, Minus, Multiply, Divide, Operator } from \"../models/operators\";\nimport { Numeric } from \"../models/operands\";\nimport tokenize, { isNumericToken, isOperatorToken } from './tokenize';\n\nfunction hasPrecedence(op1: string, op2: string): boolean {\n  if (op2 === '(' || op2 === ')') {\n    return false;\n  }\n  if ((op1 === '*' || op1 === '/')\n    && (op2 === '+' || op2 === '-')) {\n    return false;\n  }\n  return true;\n}\n\nconst parse = (token: Token): Numeric | Operator => {\n  if (isNumericToken(token)) return new Numeric(token.value, token);\n  if (isOperatorToken(token)) {\n    if (token.value === '+') return new Plus(token);\n    if (token.value === '-') return new Minus(token);\n    if (token.value === '*') return new Multiply(token);\n    if (token.value === '/') return new Divide(token);\n  }\n\n  throw new SyntaxError(`Unexpected token \"${token.value}\" at position ${token.position}`);\n}\n\nconst evaluate = (s: string): number => {\n  const tokens = tokenize(s);\n  const ops: Operator[] = [];\n  const values: Numeric[] = [];\n\n  tokens.forEach(token => {\n    const parsed: Numeric | Operator = parse(token);\n\n    if (parsed instanceof Numeric) values.push(parsed);\n    if (parsed instanceof Operator) {\n      while (ops.length && hasPrecedence(parsed.type, ops[ops.length - 1].type)) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const num: number = ops.pop()!.evaluate(values.pop(), values.pop());\n        values.push(new Numeric(num));\n      }\n      ops.push(parsed);\n    }\n  });\n\n  while (ops.length) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const num: number = ops.pop()!.evaluate(values.pop(), values.pop());\n    values.push(new Numeric(num));\n  }\n\n  const result = values.pop();\n  if (!result) throw new Error('Expect an operand');\n  return result.value;\n}\n\nexport default evaluate;","import { useState } from 'react';\n\n// COMPONENTS\nimport Wrapper from './components/Wrapper';\nimport Screen from './components/Screen';\nimport ButtonBox from './components/ButtonBox';\nimport Button from './components/Button';\n\n// UTILS\nimport evaluate from './utils/evaluate';\nimport { ALLOWED_OPERATORS } from './utils/constants';\nimport './App.css';\n\nconst btnValues = [\n  ['C', 'DEL', 'CHI', '/'],\n  ['7', '8', '9', '*'],\n  ['4', '5', '6', '-'],\n  ['1', '2', '3', '+'],\n  ['0', '.', '='],\n];\n\nconst App = () => {\n  const [expression, setExpression] = useState('');\n\n  const handleClick = (btn: string) => {\n    if (btn >= '0' && btn <= '9' || btn === '.') handleNumberClick(btn);\n    if (ALLOWED_OPERATORS.includes(btn)) handleOperatorClick(btn);\n    if (btn === '=') handleEqualClick();\n    if (btn === 'C') handleResetClick();\n    if (btn === 'DEL') handleDeleteClick();\n  }\n  const handleOperatorClick = (s: string) => setExpression(expression + s);\n  const handleNumberClick = (n: string) => setExpression(expression + n);\n  const handleEqualClick = () => {\n    try {\n      const result = evaluate(expression);\n      setExpression(`${result}`);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const handleResetClick = () => setExpression('');\n  const handleDeleteClick = () => setExpression(expression.slice(0, expression.length - 1));\n\n  return (\n    <div className='App'>\n      <Wrapper>\n        <Screen value={expression} />\n        <ButtonBox>\n          {\n            btnValues.flat().map((btn, i) => {\n              return (\n                <Button\n                  key={i}\n                  className={btn === '=' ? 'equals' : ''}\n                  value={btn}\n                  onClick={() => handleClick(btn)}\n                />\n              );\n            })\n          }\n        </ButtonBox>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}